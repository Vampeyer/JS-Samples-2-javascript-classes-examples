Setting a prototype
There are various ways of setting an object's prototype in JavaScript, and here we'll describe two: Object.create() and constructors.

Using Object.create
The Object.create() method creates a new object and allows you to specify an object that will be used as the new object's prototype.

Here's an example:

JS
Copy to Clipboard
const personPrototype = {
  greet() {
    console.log("hello!");
  },
};

const carl = Object.create(personPrototype);
carl.greet(); // hello!
Here we create an object personPrototype, which has a greet() method. We then use Object.create() to create a new object with personPrototype as its prototype. Now we can call greet() on the new object, and the prototype provides its implementation.

Using a constructor
In JavaScript, all functions have a property named prototype. When you call a function as a constructor, this property is set as the prototype of the newly constructed object (by convention, in the property named __proto__).

So if we set the prototype of a constructor, we can ensure that all objects created with that constructor are given that prototype:

JS
Copy to Clipboard
const personPrototype = {
  greet() {
    console.log(`hello, my name is ${this.name}!`);
  },
};

function Person(name) {
  this.name = name;
}

Object.assign(Person.prototype, personPrototype);
// or
// Person.prototype.greet = personPrototype.greet;
Here we create:

an object personPrototype, which has a greet() method
a Person() constructor function which initializes the name of the person to create.
We then put the methods defined in personPrototype onto the Person function's prototype property using Object.assign.

After this code, objects created using Person() will get Person.prototype as their prototype, which automatically contains the greet method.

JS
Copy to Clipboard
const reuben = new Person("Reuben");
reuben.greet(); // hello, my name is Reuben!
This also explains why we said earlier that the prototype of myDate is called Date.prototype: it's the prototype property of the Date constructor.

Own properties
The objects we create using the Person constructor above have two properties:

a name property, which is set in the constructor, so it appears directly on Person objects
a greet() method, which is set in the prototype.
It's common to see this pattern, in which methods are defined on the prototype, but data properties are defined in the constructor. That's because methods are usually the same for every object we create, while we often want each object to have its own value for its data properties (just as here where every person has a different name).

Properties that are defined directly in the object, like name here, are called own properties, and you can check whether a property is an own property using the static Object.hasOwn() method:

JS
Copy to Clipboard
const irma = new Person("Irma");

console.log(Object.hasOwn(irma, "name")); // true
console.log(Object.hasOwn(irma, "greet")); // false
Note: You can also use the non-static Object.hasOwnProperty() method here, 
but we recommend that you use Object.hasOwn() if you can.

Prototypes and inheritance
Prototypes are a powerful and very flexible feature of JavaScript,

 making it possible to reuse code and combine objects.

In particular they support a version of inheritance. Inheritance is
 a feature of object-oriented programming languages that lets programmers
  express the idea that some objects in a system are more specialized versions
   of other objects.

For example, if we're modeling a school, we might have professors
 and students: they are both people, so have some features in common (for example, they both have names), but each might add extra features (for example, professors have a subject that they teach), or might implement the same feature in different ways. In an OOP system we might say that professors and students both inherit from people.

You can see how in JavaScript, if Professor and Student objects can
 have Person prototypes, then they can inherit the common properties,
  while adding and redefining those properties which need to differ.

In the next article we'll discuss inheritance along with the other main
 features of object-oriented programming languages, and see how JavaScript
  supports them.

Summary
This article has covered JavaScript object prototypes, including how
 prototype object chains allow objects to inherit features from one
  another, the prototype property and how it can be used to add methods
   to constructors, and other related topics.